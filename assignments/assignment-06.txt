1. What is a Microservice?

Ans - In microservice architecture an application is divided into several small application. 
        Every small application handles unique task and work independently also manages its own database. 
        For example in an application there are several components like Cart , Payment gateway , Authentication, etc. 
        These components are designed and developed as a single stand alone application known as microservice.
        These different microservises/applications communicates each other with a well-defined communications interface, 
        such as an application programming interface (API)


2. What is Monolith architecture?

Ans - In Monolith architecture unlike microservice architecture every component is designed and developed as 
        a single application. UI , Backend and all other services are in single application.        


3. What is the difference between Monolith and Microservice?

Ans -   Aspect	             Monolithic Architecture	                        Microservice Architecture

    Architecture	        Single-tier architecture	                        Multi-tier architecture
        Size	            Large, all components tightly coupled	            Small, loosely coupled components
        Deployment	        Deployed as a single unit	                        Individual services can be deployed independently
        Scalability	        Horizontal scaling can be challenging	            Easier to scale horizontally
        Development	        Development is simpler initially	                Complex due to managing multiple services
        Technology	        Limited technology choices	                        Freedom to choose the best technology for each service
        Fault Tolerance	    Entire application may fail if a part fails	        Individual services can fail without affecting others
        Maintenance	        Easier to maintain due to its simplicity	        Requires more effort to manage multiple services
        Flexibility	        Less flexible as all components are tightly         coupled	More flexible as components can be developed, deployed, and scaled independently
        Communication	    Communication between components is faster	        Communication may be slower due to network calls

4. Why do we need a useEffect Hook?

Ans - useEffect hook is used to handle side effects in functional components, such as fetching data, updating 
        the DOM, and setting up subscriptions or timers. It is used to mimic the lifecycle methods of class-based
        components. The motivation behind the introduction of useEffect Hook is to eliminate the side effects of
        using class-based components. For example, tasks like updating the DOM, fetching data from API end-points, 
        setting up subscriptions or timers, etc can lead to unwarranted side effects. Since the render method is 
        too quick to produce a side-effect, one needs to use life cycle methods to observe the side effects. 

5. What is Optional Chaining?

Ans - The optional chaining (?.) operator accesses an object's property or calls a function. If the object 
        accessed or function called using this operator is undefined or null, the expression short circuits and 
        evaluates to undefined instead of throwing an error.
        ex- const adventurer = {
                                    name: 'Alice',
                                    cat: {
                                        name: 'Dinah',
                                    },
                                };

            const dogName = adventurer?.dog?.name;
            console.log(dogName);
            // Expected output: undefined

            console.log(adventurer.someNonExistentMethod?.());
            // Expected output: undefined


6. What is Shimmer UI?

Ans - A shimmer UI is a kind of the user interface that mimics the shades and forms of content that will 
        ultimately appear instead of having any actual content. It is a cool way often used when a web page or app 
        is loading. it take place of data with moving animation with shimmering effects until everything is loaded.

7. What is the difference between JS expression and JS statement

Ans - At its core, an expression is a bit of JavaScript code that produces a value.

    For example, these are all expressions:

    * 1 → produces 1
    * "hello" → produces "hello"
    * 5 * 10 → produces 50
    * num > 100 → produces either true or false
    * isHappy ? "🙂" : "🙁" → produces an emoji
    * [1, 2, 3].pop() → produces the number 3

A JavaScript program is a sequence of statements. Each statement is an instruction for the computer to do something.

Here are some examples of statements in JavaScript:

    let hi = 5;
    if (hi > 10) {
    // More statements here
    }
    throw new Error('Something exploded!');

A handy trick
    Want to know whether a chunk of JS is an expression or a statement? Try to log it out!

    console.log(/* Some chunk of JS here */);

    If it runs, the code is an expression. If you get an error, it's a statement (or, possibly, invalid JS).


8. What is Conditional Rendering, explain with a code example

Ans - Conditional rendering in React refers to the process of delivering elements and components based on certain 
        conditions. Often, you encounter scenarios where the visual representation of your UI components needs to 
        be adjusted using JSX, depending on varying circumstances. This is where conditional rendering comes in.

9. What is CORS?

Ans - Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate 
        any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. 
        CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the 
        cross-origin resource, in order to check that the server will permit the actual request. In that preflight, 
        the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.

10. What is async and await?

Ans - async makes a function return a Promise
      await makes a function wait for a Promise

      The await keyword can only be used inside an async function.
      The await keyword makes the function pause the execution and wait for a resolved promise before it continues:

11. What is the use of `const json = await data.json();` in getRestaurants()

Ans - when we fetch data from an external apis then we get the raw stream of bytes so for further use we have 
        to parse the data using data.json().